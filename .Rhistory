FareClass[full$Fare >= Q[i] & full$Fare <= Q[i+1]] = i
}
table(FareClass)
FareClass = as.factor(FareClass)
levels(FareClass) = c("cheapest","cheap","medium","high","highest")
FareClass =  factor(FareClass, levels = rev(levels(FareClass)))
levels(full$Embarked) = c("Unknown", "Cherbourg", "Queenstown", "Southampton")
table(full$Embarked)
# ggplot(data = full, aes(x = Embarked, fill = FareClass)) +
#
# SurvivalRateByFareClass = full %>%
#   geom_bar()
full$FareClass = FareClass
#   filter(Survived != "NA") %>%
#   group_by(FareClass) %>%
#   summarise(PassengerCount = n(),PassengerSurvived =  sum(Survived == 1),
#             survivalRate = round(sum(Survived == 1)/n(),3)) %>%
#   arrange(desc(FareClass))
# SurvivalRateByFareClass
#
# ggplot(SurvivalRateByFareClass, aes(x = FareClass, y = survivalRate, group = 1)) +
#   geom_line(size = 1.2)+
#   geom_text(aes(label = survivalRate), vjust = -.3, hjust = -.3 , size = 5, color = "red") +
#   ylim(0,1)+
#   xlab("Fare Class") +
#   ylab("Survival Rate")
# SurvivalRateByPclass = full %>%
#
#   ggtitle("Survival Rate by Fare Class")+
#   filter(Survived != "NA") %>%
#   group_by(Pclass) %>%
#   summarise(PassengerCount = n(),PassengerSurvived =  sum(Survived == 1),
#             survivalRate = round(sum(Survived == 1)/n(),3)) %>%
#   arrange(desc(Pclass))
# SurvivalRateByPclass
#
# ggplot(SurvivalRateByPclass, aes(x = factor(Pclass), y = survivalRate, group = 1)) +
#   geom_text(aes(label = survivalRate), vjust = -.3, hjust = -.3 , size = 5, color = "red") +
#   ggtitle("Survival Rate by Passenger Class")+
#   ylim(0,1)+
#   geom_line(size = 1.2)+
#   xlab("Passenger Class") +
#   ylab("Survival Rate")
#
# SurvivalRateByGenderSib = full %>%
#   filter(Survived != "NA") %>%
#   group_by(Sex, SibSp) %>%
#   summarise(PassengerCount = n(),PassengerSurvived =  sum(Survived == 1),
#             survivalRate = round(sum(Survived == 1)/n(),3))
# SurvivalRateByGenderSib
#
# ggplot( SurvivalRateByGenderSib, aes(x = factor(SibSp), y = survivalRate, group = interaction(Sex), color = Sex)) +
#   geom_line(size = 1.2) +
#   geom_text(aes(label = survivalRate), vjust = -.3, hjust = -.3 , size = 5, color = "red") +
#   ggtitle("Survival Rate by Sex - Number of Siblings aboard")+
#   ylim(0,1)+
#   xlab("# of sibs") +
#
# SurvivalRateByGenderParch = full %>%
#   filter(Survived != "NA") %>%
#   group_by(Sex, Parch) %>%
#   summarise(PassengerCount = n(),PassengerSurvived =  sum(Survived == 1),
#             survivalRate = round(sum(Survived == 1)/n(),3))
# SurvivalRateByGenderParch
#   ylab("Survival Rate")
#
# ggplot( SurvivalRateByGenderParch, aes(x = factor(Parch), y = survivalRate, group = interaction(Sex), color = Sex)) +
#   geom_line(size = 1.2) +
#   geom_text(aes(label = survivalRate), vjust = -.3, hjust = -.3 , size = 5, color = "red") +
#   ggtitle("Survival Rate by Sex - Number of Parent-children aboard")+
#   ylim(0,1)+
#   ylab("Survival Rate")
# Among the people who travels with siblings/parents, are they survived together or not, this method is not perfect due to limitation of
# knowing whos travel with who, the method that we used here is just based on the surname, a spouse may have different surname which may cause
# error in this analysis
full$Surname = str_extract(full$Name, pattern = "[A-z]*" )
# SurvivalRateSibSp = full %>%   filter(Survived != "NA" & SibSp != 0) %>%
#   group_by(SibSp, Surname) %>%
#   summarise(PassengerCount = n(),PassengerSurvived =sum(Survived == 1),
#             survivalRate = round(sum(Survived == 1)/n(),3)) %>%
#   arrange(desc(survivalRate))
#
# ggplot(SurvivalRateSibSp, aes(x = SibSp, y = survivalRate)) +
#   scale_x_continuous( breaks = seq(0,8,1))+
#   xlab("# of Parent-Children") +
#   scale_y_continuous( breaks = seq(0,1,.5))+
#   xlab("# of siblings ") +
#   ylab("Survival Rate") +
#   ggtitle("Survival Rate per case by number of siblings") +
#   geom_jitter(width =.5, color = "blue")
# observation : Most people with siblings/ traveling together chose to either survive together or not survive together
full$GenderAgeClass = as.factor(full$GenderAgeClass)
train = full[!is.na(full$Survived),]
test = full[is.na(full$Survived),]
summary(train)
summary(test)
set.seed(100)
titanic.rf = randomForest(factor(Survived) ~ Pclass + Sex + SibSp  + Parch + Fare + Embarked + honorific + GenderAgeClass + FareClass + Age ,
data = train)
plot(titanic.rf, ylim=c(0,0.36))
legend('topright', colnames(titanic.rf$err.rate), col=1:3, fill=1:3)
prediction = predict(titanic.rf, test)
submission = data.frame(PassengerId = test$PassengerId, Survived = prediction)
write.csv(submission, "submission.csv", row.names = FALSE)
full$honorific = as.factor(full$honorific)
table(prediction,genderclassmodel[,2])
rm(list = ls())
setwd("C:/Users/dan_9/Desktop/COURSERA + SELF STUDY/Kaggle/Titanic")
library(dplyr)
library(ggplot2)
library(gridExtra)
library(randomForest)
library(stringr)
library(missForest) # imputation
library(mice) # imputation
library(VIM) # visualization missing value
genderclassmodel = read.csv("genderclassmodel.csv")
gendermodel = read.csv("gendermodel.csv")
training = read.csv("train.csv")
testing = read.csv("test.csv")
glimpse(training)
head(training)
tail(training)
head(testing)
tail(testing)
# adding column "Survived" on the testing dataset
testing$Survived = NA
# move this column to the 2nd for binding purpose
testing = testing[,c(1, grep("Survived", colnames(testing)), 2 :  (grep("Survived", colnames(testing))-1))]
full = rbind(training, testing)
glimpse(full)
# column name should be character instead of factor
full$Name = as.character(full$Name)
# checking how many NA for each column for both training and testing data
trainingNAs = aggr(training, numbers=T, sortVars=T)
testingNAs = aggr(testing, numbers=T, sortVars=T)
fullNAs = aggr(full, numbers=T, sortVars=T)
trainingNAs
testingNAs
fullNAs
# We need to see Fare column and fill it with the value that make sense,
# in this case, we will fill the cell with based on the passanger's other attributes, compared with other passanger,
# which is Pclass, Age >=50, Embarked from Southampton
which(is.na(full$Fare))
# [1] 1044
full[1044,]
# PassengerId Survived Pclass               Name  Sex  Age SibSp Parch Ticket Fare Cabin    Embarked honorific GenderAgeClass FareClass Surname
# 1044        1044       NA      3 Storey, Mr. Thomas male 60.5     0     0   3701   NA       S         Mr.     Adult Male      <NA>  Storey
# to estimate the fare of passenger ID   1044, we need to find the mean value of people similar to his pattern:
full %>% filter(!is.na(Fare), Pclass == 3, Age >= 50, Embarked == "S" ) %>% summarise(mean(Fare))
# 8.43042 <- we need to fill the NA of passanger #1044's fare with this value
full$Fare[1044] = 8.43042
# Next, we need to work on NAs in Age column, we will use library(missRandom) and library(mice) for the imputation of missing values
# in Age column
# To compare before and after missing value imputation, we will do exploratory analysis before and after missing value imputation
# plotAgeRaw1 = ggplot(full[!is.na(full$Age),], aes(x = Age )) +
#   geom_histogram() +
#   facet_grid(~Sex) +
#   coord_cartesian(ylim =  seq(0,100,5))+
#   scale_y_continuous(breaks = seq(0,100,5)) +
#   scale_x_continuous(breaks = seq(0,90,10)) +
#   ggtitle("Age Dsitribution of Passenger by Gender\n RAWDATA")
#
# plotAgeRaw2 = ggplot(full[!is.na(full$Age),], aes(x = Age, fill = as.factor(Sex))) +
#   geom_histogram(position = "identity", alpha = .4) +
#   scale_fill_manual(values=c("green", "purple")) +
#   coord_cartesian(ylim =  seq(0,100,5))+
#   scale_y_continuous(breaks = seq(0,100,5)) +
#   scale_x_continuous(breaks = seq(0,90,10)) +
#   ggtitle("Age Dsitribution of Passenger by Gender\n RAWDATA") +
#   labs(fill="")
#
# medians = aggregate(Age ~  Sex, full, median)
#
# plotAgeRaw3 = ggplot(full[!is.na(full$Age),], aes(x = Sex, y = Age)) +
#   geom_boxplot() +
#   scale_y_continuous(breaks = seq(0,80,5)) +
#   geom_text( data = medians, aes( label = Age, y = Age), vjust = -.5) +
#   ggtitle("Age Dsitribution of Passenger by Gender\n RAW")
#
# plotAgeRaw1
# plotAgeRaw2
# plotAgeRaw3
full$Age[is.na(full$Age) & full$Sex == "female"] = 27
full$Age[is.na(full$Age) & full$Sex == "male"] = 28
# 1st approach we predict the missing Age using missForrest Package, which predict missing values using random forrest
# eliminating columns: PassengerId,Survived,Name,Parch, Ticket,Cabin, because Age should not be correlated to these columns
#
# temp = full[-c(1,2,4,8,9,11)]
# set.seed(100)
# Age.rf = missForest(temp)
# full$Age = Age.rf$ximp$Age
#
# plotAge.rf1 = ggplot(full[!is.na(full$Age),], aes(x = Age )) +
#   geom_histogram() +
#   facet_grid(~Sex) +
#   coord_cartesian(ylim =  seq(0,150,5))+
#   scale_y_continuous(breaks = seq(0,150,5)) +
#   scale_x_continuous(breaks = seq(0,90,10)) +
#   ggtitle("Age Dsitribution of Passenger by Gender\n MISSFORREST")
#
# plotAge.rf2 = ggplot(full[!is.na(full$Age),], aes(x = Age, fill = as.factor(Sex))) +
#   geom_histogram(position = "identity", alpha = .4) +
#   scale_fill_manual(values=c("green", "purple")) +
#   scale_y_continuous(breaks = seq(0,150,5))+
#   scale_x_continuous(breaks = seq(0,90,10)) +
#   ggtitle("Age Dsitribution of Passenger by Gender\n MISSFORREST") +
#   labs(fill="")
#
# grid.arrange(plotAgeRaw2, plotAge.rf2 , ncol=2)
# grid.arrange(plotAgeRaw1, plotAge.rf1 , ncol=2)
# 2nd approach we predict the missing Age using MICE Package, this time we will use "pmm" method, (predictive mean matching)
# eliminating columns: PassengerId,Survived,Name,Parch, Ticket,Cabin, because Age should not be correlated to these columns
# temp2 = full[-c(1,2,4,9,11)]
# set.seed(100)
# micePmm = mice(temp2 , method = "norm")
# # micePmm$imp$Age$`3`
# micePmm$method
# temp2  = complete(micePmm,3)
# full$Age = temp2$Age
#
# plotAge.mice1 = ggplot(full[!is.na(full$Age),], aes(x = Age )) +
#   geom_histogram() +
#   facet_grid(~Sex) +
#   coord_cartesian(ylim =  seq(0,100,5))+
#   scale_y_continuous(breaks = seq(0,100,5)) +
#   scale_x_continuous(breaks = seq(0,90,10)) +
#   ggtitle("Age Dsitribution of Passenger by Gender\n MICE")
#
# plotAge.mice2 = ggplot(full[!is.na(full$Age),], aes(x = Age, fill = as.factor(Sex))) +
#   geom_histogram(position = "identity", alpha = .4) +
#   scale_fill_manual(values=c("green", "purple")) +
#   scale_y_continuous(breaks = seq(0,100,5))+
#   scale_x_continuous(breaks = seq(0,90,10)) +
#   ggtitle("Age Dsitribution of Passenger by Gender\n MICE") +
#   labs(fill="")
#
# medians = aggregate(Age ~  Sex, full, median)
#
# plotAge.mice3 = ggplot(full[!is.na(full$Age),], aes(x = Sex, y = Age)) +
#   geom_boxplot() +
#   scale_y_continuous(breaks = seq(0,80,5)) +
#   geom_text( data = medians, aes( label = Age, y = Age), vjust = -.5) +
#   ggtitle("Age Dsitribution of Passenger by Gender\n MICE")
#
#
# grid.arrange(plotAgeRaw1, plotAge.mice1 , ncol=2)
# grid.arrange(plotAgeRaw2, plotAge.mice2 , ncol=2)
# grid.arrange(plotAgeRaw3, plotAge.mice3 , ncol=2)
# we would like to analyze based on honorifics system on their name,
# and ultimately group it into adult male, female, young male
full$honorific = str_extract(full$Name, pattern = "\\,[ ][A-z]*[ ]*[A-z]*\\.")
full$honorific = gsub(", ","",full$honorific)
table(full$honorific)
full$GenderAgeClass[full$honorific ==  "Miss." | full$honorific ==  "Mrs."| full$honorific ==  "Mlle."|
full$honorific ==  "Lady."|full$honorific ==  "Mme."|full$honorific ==  "Ms."|
full$honorific ==  "the Countess."|full$honorific ==  "Dona."] = "Female"
full$GenderAgeClass[full$honorific ==  "Mr." |  full$honorific ==  "Dr."| full$honorific ==  "Col."|
full$honorific ==  "Major."| full$honorific ==  "Sir."|full$honorific ==  "Capt."|
full$honorific ==  "Don."| full$honorific ==  "Jonkheer."|full$honorific ==  "Rev."] = "Adult Male"
full$GenderAgeClass[full$honorific ==  "Master."] = "Young Male"
# turned out its not as high as we expected, so that means it is necessary to keep both variables
boxplot(full$Fare, na.rm = T)
# for quantile, we used only the training data
Q = quantile(full$Fare[!is.na(full$Survived)], probs = seq(0,1,.2) )
FareClass = matrix(ncol = 1, nrow = nrow(full))
for( i in 1 : length(Q)){
FareClass[full$Fare >= Q[i] & full$Fare <= Q[i+1]] = i
}
table(FareClass)
FareClass = as.factor(FareClass)
levels(FareClass) = c("cheapest","cheap","medium","high","highest")
FareClass =  factor(FareClass, levels = rev(levels(FareClass)))
full$FareClass = FareClass
levels(full$Embarked) = c("Unknown", "Cherbourg", "Queenstown", "Southampton")
table(full$Embarked)
# ggplot(data = full, aes(x = Embarked, fill = FareClass)) +
#   geom_bar()
#
# SurvivalRateByFareClass = full %>%
#   filter(Survived != "NA") %>%
#   group_by(FareClass) %>%
#   summarise(PassengerCount = n(),PassengerSurvived =  sum(Survived == 1),
#             survivalRate = round(sum(Survived == 1)/n(),3)) %>%
#   arrange(desc(FareClass))
# SurvivalRateByFareClass
#
# ggplot(SurvivalRateByFareClass, aes(x = FareClass, y = survivalRate, group = 1)) +
#   geom_line(size = 1.2)+
#   geom_text(aes(label = survivalRate), vjust = -.3, hjust = -.3 , size = 5, color = "red") +
#   ggtitle("Survival Rate by Fare Class")+
#   ylim(0,1)+
#   xlab("Fare Class") +
#   ylab("Survival Rate")
#
# SurvivalRateByPclass = full %>%
#   filter(Survived != "NA") %>%
#   group_by(Pclass) %>%
#   summarise(PassengerCount = n(),PassengerSurvived =  sum(Survived == 1),
#             survivalRate = round(sum(Survived == 1)/n(),3)) %>%
#   arrange(desc(Pclass))
# SurvivalRateByPclass
#
# ggplot(SurvivalRateByPclass, aes(x = factor(Pclass), y = survivalRate, group = 1)) +
#   geom_line(size = 1.2)+
#   geom_text(aes(label = survivalRate), vjust = -.3, hjust = -.3 , size = 5, color = "red") +
#   ggtitle("Survival Rate by Passenger Class")+
#   ylim(0,1)+
#   xlab("Passenger Class") +
#   ylab("Survival Rate")
#
# SurvivalRateByGenderSib = full %>%
#   filter(Survived != "NA") %>%
#   group_by(Sex, SibSp) %>%
#   summarise(PassengerCount = n(),PassengerSurvived =  sum(Survived == 1),
#             survivalRate = round(sum(Survived == 1)/n(),3))
# SurvivalRateByGenderSib
#
# ggplot( SurvivalRateByGenderSib, aes(x = factor(SibSp), y = survivalRate, group = interaction(Sex), color = Sex)) +
#   geom_line(size = 1.2) +
#   geom_text(aes(label = survivalRate), vjust = -.3, hjust = -.3 , size = 5, color = "red") +
#   ggtitle("Survival Rate by Sex - Number of Siblings aboard")+
#   ylim(0,1)+
#   xlab("# of sibs") +
#   ylab("Survival Rate")
#
# SurvivalRateByGenderParch = full %>%
#   filter(Survived != "NA") %>%
#   group_by(Sex, Parch) %>%
#   summarise(PassengerCount = n(),PassengerSurvived =  sum(Survived == 1),
#             survivalRate = round(sum(Survived == 1)/n(),3))
# SurvivalRateByGenderParch
#
# ggplot( SurvivalRateByGenderParch, aes(x = factor(Parch), y = survivalRate, group = interaction(Sex), color = Sex)) +
#   geom_line(size = 1.2) +
#   geom_text(aes(label = survivalRate), vjust = -.3, hjust = -.3 , size = 5, color = "red") +
#   ggtitle("Survival Rate by Sex - Number of Parent-children aboard")+
#   ylim(0,1)+
#   xlab("# of Parent-Children") +
#   ylab("Survival Rate")
# Among the people who travels with siblings/parents, are they survived together or not, this method is not perfect due to limitation of
# knowing whos travel with who, the method that we used here is just based on the surname, a spouse may have different surname which may cause
# error in this analysis
full$Surname = str_extract(full$Name, pattern = "[A-z]*" )
# SurvivalRateSibSp = full %>%   filter(Survived != "NA" & SibSp != 0) %>%
#   group_by(SibSp, Surname) %>%
#   summarise(PassengerCount = n(),PassengerSurvived =sum(Survived == 1),
#             survivalRate = round(sum(Survived == 1)/n(),3)) %>%
#   arrange(desc(survivalRate))
full$honorific = as.factor(full$honorific)
full$GenderAgeClass = as.factor(full$GenderAgeClass)
train = full[!is.na(full$Survived),]
test = full[is.na(full$Survived),]
summary(train)
summary(test)
set.seed(100)
titanic.rf = randomForest(factor(Survived) ~ Pclass + Sex + SibSp  + Parch + Fare + Embarked + honorific + GenderAgeClass + FareClass + Age ,
data = train)
plot(titanic.rf, ylim=c(0,0.36))
legend('topright', colnames(titanic.rf$err.rate), col=1:3, fill=1:3)
prediction = predict(titanic.rf, test)
submission = data.frame(PassengerId = test$PassengerId, Survived = prediction)
write.csv(submission, "submission.csv", row.names = FALSE)
table(prediction,genderclassmodel[,2])
mean(prediction != genderclassmodel$Survived)
importance(titanic.rf)
names(full)
?importance()
importance(titanic.rf, type = 1)
type(randomForest())
type(randomForest)
importance(titanic.rf, type = 2)
importance(titanic.rf, type = 1)
rm(list = ls())
setwd("C:/Users/dan_9/Desktop/COURSERA + SELF STUDY/Kaggle/Titanic")
library(dplyr)
library(ggplot2)
library(gridExtra)
library(randomForest)
library(stringr)
library(missForest) # imputation
library(mice) # imputation
library(VIM) # visualization missing value
genderclassmodel = read.csv("genderclassmodel.csv")
gendermodel = read.csv("gendermodel.csv")
training = read.csv("train.csv")
testing = read.csv("test.csv")
glimpse(training)
head(training)
tail(training)
head(testing)
tail(testing)
# adding column "Survived" on the testing dataset
testing$Survived = NA
# move this column to the 2nd for binding purpose
testing = testing[,c(1, grep("Survived", colnames(testing)), 2 :  (grep("Survived", colnames(testing))-1))]
full = rbind(training, testing)
glimpse(full)
# column name should be character instead of factor
full$Name = as.character(full$Name)
# checking how many NA for each column for both training and testing data
trainingNAs = aggr(training, numbers=T, sortVars=T)
testingNAs = aggr(testing, numbers=T, sortVars=T)
fullNAs = aggr(full, numbers=T, sortVars=T)
trainingNAs
testingNAs
fullNAs
which(is.na(full$Fare))
full[1044,]
full %>% filter(!is.na(Fare), Pclass == 3, Age >= 50, Embarked == "S" ) %>% summarise(mean(Fare))
full$Fare[1044] = 8.43042
plotAgeRaw1 = ggplot(full[!is.na(full$Age),], aes(x = Age )) +
geom_histogram() +
facet_grid(~Sex) +
coord_cartesian(ylim =  seq(0,100,5))+
scale_y_continuous(breaks = seq(0,100,5)) +
scale_x_continuous(breaks = seq(0,90,10)) +
ggtitle("Age Dsitribution of Passenger by Gender\n RAWDATA")
plotAgeRaw2 = ggplot(full[!is.na(full$Age),], aes(x = Age, fill = as.factor(Sex))) +
geom_histogram(position = "identity", alpha = .4) +
scale_fill_manual(values=c("green", "purple")) +
coord_cartesian(ylim =  seq(0,100,5))+
scale_y_continuous(breaks = seq(0,100,5)) +
scale_x_continuous(breaks = seq(0,90,10)) +
ggtitle("Age Dsitribution of Passenger by Gender\n RAWDATA") +
labs(fill="")
medians = aggregate(Age ~  Sex, full, median)
medians
medians = aggregate(Age ~  Sex, full, median)
plotAgeRaw3 = ggplot(full[!is.na(full$Age),], aes(x = Sex, y = Age)) +
geom_boxplot() +
scale_y_continuous(breaks = seq(0,80,5)) +
geom_text( data = medians, aes( label = Age, y = Age), vjust = -.5) +
ggtitle("Age Dsitribution of Passenger by Gender\n RAW")
plotAgeRaw1
plotAgeRaw2
plotAgeRaw3
medians = aggregate(Age ~  Sex, full, median)
full$Age[is.na(full$Age) & full$Sex == "female"] = 27
full$Age[is.na(full$Age) & full$Sex == "male"] = 28
plotAgeRaw1
plotAgeRaw2
plotAgeRaw3
plotAgeRaw1
plotAgeRaw2
plotAgeRaw3
plotAgeRaw1 = ggplot(full[!is.na(full$Age),], aes(x = Age )) +
geom_histogram() +
facet_grid(~Sex) +
coord_cartesian(ylim =  seq(0,100,5))+
scale_y_continuous(breaks = seq(0,100,5)) +
scale_x_continuous(breaks = seq(0,90,10)) +
ggtitle("Age Dsitribution of Passenger by Gender\n RAWDATA")
plotAgeRaw2 = ggplot(full[!is.na(full$Age),], aes(x = Age, fill = as.factor(Sex))) +
geom_histogram(position = "identity", alpha = .4) +
scale_fill_manual(values=c("green", "purple")) +
coord_cartesian(ylim =  seq(0,100,5))+
scale_y_continuous(breaks = seq(0,100,5)) +
scale_x_continuous(breaks = seq(0,90,10)) +
ggtitle("Age Dsitribution of Passenger by Gender\n RAWDATA") +
labs(fill="")
plotAgeRaw3 = ggplot(full[!is.na(full$Age),], aes(x = Sex, y = Age)) +
geom_boxplot() +
scale_y_continuous(breaks = seq(0,80,5)) +
geom_text( data = medians, aes( label = Age, y = Age), vjust = -.5) +
ggtitle("Age Dsitribution of Passenger by Gender\n RAW")
plotAgeRaw1
plotAgeRaw2
plotAgeRaw3
set.seed(647)
myiris <- cbind(iris[1:4], matrix(runif(96 * nrow(iris)), nrow(iris), 96))
myiris
head(myiris)
head(iris)
runif?()
?runif()
?runif
nrow(iris)
96 * nrow(iris)
nrow(iris)
?matrix
result <- rfcv(myiris, iris$Species, cv.fold=3)
result
with(result, plot(n.var, error.cv, log="x", type="o", lwd=2))
myiris
head(myiris)
head(iris)
result <- rfcv(myiris, iris$Species, cv.fold=3)
with(result, plot(n.var, error.cv, log="x", type="o", lwd=2))
set.seed(647)
set.seed(647)
head(iris)
?runif
myiris <- cbind(iris[1:4], matrix(runif(96 * nrow(iris)), nrow(iris), 96))
?matrix
head(myiris)
result <- rfcv(myiris, iris$Species, cv.fold=3)
with(result, plot(n.var, error.cv, log="x", type="o", lwd=2))
set.seed(647)
head(iris)
?runif
myiris <- cbind(iris[1:4], matrix(runif(96 * nrow(iris)), nrow(iris), 96))
?matrix
head(myiris)
result <- rfcv(myiris, iris$Species, cv.fold=3)
with(result, plot(n.var, error.cv, log="x", type="o", lwd=2))
with(result, plot(n.var, error.cv, log="x", type="o", lwd=2))
library(MASS)
attach(Boston)
library(tree)
library(dplyr)
set.seed(1)
